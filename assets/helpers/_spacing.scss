@use "../settings";
@use "measurements";
@use "media-queries";

@use "sass:meta";
@use "sass:map";

@function kim-spacing($spacing-point, $breakpoint: null) {
  $actual-input-type: meta.type-of($spacing-point);
  @if $actual-input-type != "number" {
    @error "Expected a number (integer), but got a #{$actual-input-type}.";
  }
  @if not map.has-key(settings.$kim-spacing, $spacing-point) {
    @error "Unknown spacing point `#{$spacing-point}`.";
  }
  $spacing-map: map.get(settings.$kim-spacing, $spacing-point);
  @if not map.has-key($spacing-map, $breakpoint) {
    @error "Breakpoint `#{$breakpoint}` does not exist for spacing point #{$spacing-point}.";
  }
  @return measurements.kim-px-to-rem(map.get($spacing-map, $breakpoint));
}

// Responsive spacing mixin
@mixin kim-responsive-spacing(
  $spacing-point,
  $property,
  $direction: "all",
  $important: false
) {
  $spacing-map: map.get(settings.$kim-spacing, $spacing-point);
  @each $breakpoint, $breakpoint-value in $spacing-map {
    @if ($breakpoint == null) {
      @if $direction == "all" {
        #{$property}: kim-spacing($spacing-point)
          if($important, !important, null);
      } @else {
        #{$property}-#{$direction}: kim-spacing($spacing-point)
          if($important, !important, null);
      }
    } @else {
      @include media-queries.kim-mq($from: $breakpoint) {
        @if $direction == "all" {
          #{$property}: kim-spacing($spacing-point, $breakpoint)
            if($important, !important, null);
        } @else {
          #{$property}-#{$direction}: kim-spacing($spacing-point, $breakpoint)
            if($important, !important, null);
        }
      }
    }
  }
}

// Responsive margins
@mixin kim-responsive-margin(
  $spacing-point,
  $direction: "all",
  $important: false
) {
  @include kim-responsive-spacing(
    $spacing-point,
    "margin",
    $direction,
    $important
  );
}

// Responsive padding
@mixin kim-responsive-padding(
  $spacing-point,
  $direction: "all",
  $important: false
) {
  @include kim-responsive-spacing(
    $spacing-point,
    "padding",
    $direction,
    $important
  );
}
