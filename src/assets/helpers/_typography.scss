@use "../settings";
@use "measurements";
@use "media-queries";

@use "sass:map";
@use "sass:math";

// Common typography rules
@mixin kim-typography-common {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// Convert pixel line-heights into relative values
@function _kim-line-height($line-height, $font-size) {
  @if not
    math.is-unitless($line-height) and
    math.unit($line-height) ==
    math.unit($font-size)
  {
    $line-height: math.div($line-height, $font-size);
  }
  @return $line-height;
}

// Font family
@mixin kim-font-stack($stack, $weight: false, $important: false) {
  @if not map.has-key(settings.$kim-font-stacks, $stack) {
    @error "Unknown font stack `#{$stack}` - expected a family from the font families map.";
  }
  $stack-map: map.get(settings.$kim-font-stacks, $stack);
  font-family: map.get($stack-map, "stack") if($important, !important, null);
  @if $weight {
    @if map.has-key($stack-map, $weight) {
      font-weight: map.get($stack-map, $weight)
        if($important, !important, null);
    } @else {
      font-weight: $weight if($important, !important, null);
    }
  }
}

// Responsive font-size mixin
@mixin kim-font-size($size, $important: false) {
  @if not map.has-key(settings.$kim-font-sizes, $size) {
    @error "Unknown font size `#{$size}` - expected a point from the typography scale.";
  }
  $size-map: map.get(settings.$kim-font-sizes, $size);
  @each $breakpoint, $breakpoint-map in $size-map {
    $font-size: map.get($breakpoint-map, "font-size");
    $font-size-rem: measurements.kim-px-to-rem($font-size);
    $line-height: _kim-line-height(
      map-get($breakpoint-map, "line-height"),
      $font-size
    );
    @if $important {
      $font-size: $font-size !important;
      $font-size-rem: $font-size-rem !important;
      $line-height: $line-height !important;
    }
    @if ($breakpoint == null) {
      font-size: $font-size-rem;
      line-height: $line-height;
    } @else {
      @include media-queries.kim-mq($from: $breakpoint) {
        font-size: $font-size-rem;
        line-height: $line-height;
      }
    }
  }
}

// Get line height for a given font size (used for vertical rhythm)
@mixin kim-vr-margin($size, $direction: "bottom", $important: false) {
  @if not map.has-key(settings.$kim-font-sizes, $size) {
    @error "Unknown font size `#{$size}` - expected a point from the typography scale.";
  }
  $property: "margin";
  @if $direction != "all" {
    $property: "margin-" + $direction;
  }
  $size-map: map.get(settings.$kim-font-sizes, $size);
  @each $breakpoint, $breakpoint-map in $size-map {
    $font-size: map.get($breakpoint-map, "font-size");
    $line-height: _kim-line-height(
        map-get($breakpoint-map, "line-height"),
        $font-size
      ) *
      1em;
    @if $important {
      $line-height: $line-height !important;
    }
    @if ($breakpoint == null) {
      #{$property}: $line-height;
    } @else {
      @include media-queries.kim-mq($from: $breakpoint) {
        #{$property}: $line-height;
      }
    }
  }
}

// Activate tabular figures (only works if the font supports it)
@mixin kim-tabular-figures {
  font-variant-numeric: tabular-nums;
  font-feature-settings: "tnum";
}
